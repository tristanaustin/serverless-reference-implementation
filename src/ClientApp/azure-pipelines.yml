trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include: 
    - src/ClientApp

stages:
- stage: Build
  jobs:
  - job: WebsiteBuild
    displayName: Build Fabrikam Drone Status app using Gatbsyjs
    pool:
      vmImage: 'Ubuntu-16.04'
    continueOnError: false
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'install node.js'

    - script: |
        cd src/ClientApp
        cat > .env.production <<EOF
        AZURE_TENANT_ID=$(azureTenantId)
        AZURE_CLIENT_ID=$(azureClientId)
        AZURE_API_CLIENT_ID=$(azureApiClientId)
        AZURE_API_URL=$(azureApiUrl)
        EOF
      displayName: 'configure azure tenant, client and api details'

    - script: |
        cd src/ClientApp
        npm install
        npx gatsby build
      displayName: 'gatsby build'

    - script: |
        cd src/ClientApp/public
        sudo apt-get install brotli --install-suggests --no-install-recommends -q --assume-yes
        for f in $(find . -type f \( -iname '*.html' -o -iname '*.map' -o -iname '*.js' -o -iname '*.json' \)); do brotli $f -Z -j -f -v && mv ${f}.br $f; done
      displayName: 'enable compression at origin level'

    - script: |
        cd $(Build.SourcesDirectory)
        echo $(docker run --rm -v "$(pwd):/repo" gittools/gitversion:5.0.1-linux-netcoreapp2.1 /repo) > .gitversion
        echo $(cat .gitversion | grep -oP '(?<="MajorMinorPatch":")[^"]*') > src/ClientApp/public/version.txt
        echo $(cat .gitversion | grep -oP '(?<="FullSemVer":")[^"]*' | sed -e "s/\+/-/g") > src/ClientApp/public/semver.txt
      displayName: 'bump version'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'src/ClientApp/public'
        artifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  jobs:
  - deployment: WebsiteDeploy
    displayName: Deploy Fabrikam Drone Status app
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'fabrikamdronestatus-prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo '##vso[task.setvariable variable=releaseVersion]'$(cat "$(Pipeline.Workspace)/drop/version.txt")
              echo '##vso[task.setvariable variable=releaseSemVer]'$(cat "$(Pipeline.Workspace)/drop/semver.txt")
            displayName: 'set release version'
            name: setVarReleaseVersion

          - task: GithubRelease@0
            displayName: 'create or edit GitHub release'
            inputs:
              gitHubConnection: $(gitHubServiceConnectionName)
              tagSource: manual
              action: edit
              tag: $(releaseVersion)
              title: 'Fabrikam Drone Status App $(releaseVersion)'
          
          - script: |
              az login --service-principal -u $(azureArmClientId) -p $(azureArmClientSecret) --tenant $(azureArmTenantId)
              # upload content to container versioned folder
              az storage blob upload-batch -s "$(Pipeline.Workspace)/drop" --destination "\$web\$(releaseSemVer)" --account-name $(azureStorageAccountName) --content-encoding br --pattern "*.html" --content-type "text/html"
              az storage blob upload-batch -s "$(Pipeline.Workspace)/drop" --destination "\$web\$(releaseSemVer)" --account-name $(azureStorageAccountName) --content-encoding br --pattern "*.js" --content-type "application/javascript"
              az storage blob upload-batch -s "$(Pipeline.Workspace)/drop" --destination "\$web\$(releaseSemVer)" --account-name $(azureStorageAccountName) --content-encoding br --pattern "*.js.map" --content-type "application/octet-stream"
              az storage blob upload-batch -s "$(Pipeline.Workspace)/drop" --destination "\$web\$(releaseSemVer)" --account-name $(azureStorageAccountName) --content-encoding br --pattern "*.json" --content-type "application/json"
              az storage blob upload-batch -s "$(Pipeline.Workspace)/drop" --destination "\$web\$(releaseSemVer)" --account-name $(azureStorageAccountName) --pattern "*.txt" --content-type "text/plain"
              # target new version
              az cdn endpoint update --resource-group $(azureResourceGroup) --profile-name $(azureCdnName) --name $(azureCdnName) --origin-path '/$(releaseSemVer)'
              AZURE_CDN_ENDPOINT_HOSTNAME=$(az cdn endpoint show --resource-group $(azureResourceGroup) --name $(azureCdnName) --profile-name $(azureCdnName) --query hostName -o tsv)
              echo "Azure CDN endpooint host ${AZURE_CDN_ENDPOINT_HOSTNAME}"
              echo '##vso[task.setvariable variable=azureCndEndpointHost]'$AZURE_CDN_ENDPOINT_HOSTNAME
            displayName: 'upload to Azure Storage static website hosting and purge Azure CDN endpoint'
          
          - script: |
              echo "curl --fail --silent https://$(azureCndEndpointHost)/semver.txt)"
              liveVersion=$(curl --fail --silent "https://$(azureCndEndpointHost)/semver.txt")
              [[ $liveVersion == $(releaseSemVer) ]] && echo -e "\033[1;32m## [Passed] website validation Ok: $liveVersion is live now\033[0m" || >&2 echo -e "\033[0;31m## [Fail] website validation Fail: expected $(releaseSemVer) - actual $liveVersion\033[0m"
            displayName: 'validate website version'
            failOnStderr: false